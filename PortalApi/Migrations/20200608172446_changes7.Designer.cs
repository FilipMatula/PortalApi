// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalApi.Contexts;

namespace PortalApi.Migrations
{
    [DbContext(typeof(PortalContext))]
    [Migration("20200608172446_changes7")]
    partial class changes7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleSubcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2500)")
                        .HasMaxLength(2500);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleSubcategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy1_Content",
                            Date = new DateTime(2020, 6, 9, 19, 24, 45, 720, DateTimeKind.Local).AddTicks(3130),
                            ImgSrc = "sciezka IMG 1",
                            Title = "Rozmowy1-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy2_Content",
                            Date = new DateTime(2020, 6, 10, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5642),
                            ImgSrc = "sciezka IMG 2",
                            Title = "Rozmowy2-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy3e_Content",
                            Date = new DateTime(2020, 6, 11, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5779),
                            ImgSrc = "sciezka IMG 3",
                            Title = "Rozmowy3e-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy4_Content",
                            Date = new DateTime(2020, 6, 12, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5786),
                            ImgSrc = "sciezka IMG 4",
                            Title = "Rozmowy4-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy5_Content",
                            Date = new DateTime(2020, 6, 13, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5791),
                            ImgSrc = "sciezka IMG 5",
                            Title = "Rozmowy5-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia1_Content",
                            Date = new DateTime(2020, 6, 8, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5795),
                            ImgSrc = "sciezka IMG 1",
                            Title = "Wydarzenia1-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia2_Content",
                            Date = new DateTime(2020, 6, 8, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5800),
                            ImgSrc = "sciezka IMG 2",
                            Title = "Wydarzenia2-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia3_Content",
                            Date = new DateTime(2020, 6, 8, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5803),
                            ImgSrc = "sciezka IMG 3",
                            Title = "Wydarzenia3-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia4_Content",
                            Date = new DateTime(2020, 6, 8, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5807),
                            ImgSrc = "sciezka IMG 4",
                            Title = "Wydarzenia4-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia5_Content",
                            Date = new DateTime(2020, 6, 8, 19, 24, 45, 724, DateTimeKind.Local).AddTicks(5811),
                            ImgSrc = "sciezka IMG 5",
                            Title = "Wydarzenia5-Title",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ArticleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tatuaż"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Piercing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Modeling"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fotografia"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("ArticleSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleCategoryId = 1,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 2,
                            ArticleCategoryId = 1,
                            Name = "Wydarzenia"
                        },
                        new
                        {
                            Id = 3,
                            ArticleCategoryId = 1,
                            Name = "Porady o tatuażu"
                        },
                        new
                        {
                            Id = 4,
                            ArticleCategoryId = 1,
                            Name = "Relacje"
                        },
                        new
                        {
                            Id = 5,
                            ArticleCategoryId = 1,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 6,
                            ArticleCategoryId = 1,
                            Name = "Ze świata"
                        },
                        new
                        {
                            Id = 7,
                            ArticleCategoryId = 1,
                            Name = "Oferty pracy"
                        },
                        new
                        {
                            Id = 8,
                            ArticleCategoryId = 2,
                            Name = "O przekłuciu"
                        },
                        new
                        {
                            Id = 9,
                            ArticleCategoryId = 2,
                            Name = "Porady"
                        },
                        new
                        {
                            Id = 10,
                            ArticleCategoryId = 2,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 11,
                            ArticleCategoryId = 2,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 12,
                            ArticleCategoryId = 3,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 13,
                            ArticleCategoryId = 3,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 14,
                            ArticleCategoryId = 4,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 15,
                            ArticleCategoryId = 4,
                            Name = "Różne"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.AvailableDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<int>("TattooerId")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TattooerId");

                    b.ToTable("AvailableDesigns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 1,
                            Date = new DateTime(2020, 6, 9, 19, 24, 45, 727, DateTimeKind.Local).AddTicks(2654),
                            ImgSrc = "sciezka Available Design 1",
                            Reserved = false,
                            Style = 1,
                            TattooerId = 1,
                            Technique = 2
                        },
                        new
                        {
                            Id = 2,
                            Color = 1,
                            Date = new DateTime(2020, 6, 10, 19, 24, 45, 727, DateTimeKind.Local).AddTicks(6881),
                            ImgSrc = "sciezka Available Design 2",
                            Price = 300.0,
                            Reserved = true,
                            Style = 2,
                            TattooerId = 2,
                            Technique = 1
                        },
                        new
                        {
                            Id = 3,
                            Color = 1,
                            Date = new DateTime(2020, 6, 11, 19, 24, 45, 727, DateTimeKind.Local).AddTicks(6977),
                            ImgSrc = "sciezka Available Design 3",
                            Price = 199.99000000000001,
                            Reserved = false,
                            Style = 3,
                            TattooerId = 3,
                            Technique = 2
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Warszawa"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Krakow"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Wroclaw"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "Monachium"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            Name = "Frankfurt"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            Name = "Paryż"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Polska"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Niemcy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Francja"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Krakow",
                            Gender = 2,
                            ImgSrc = "ProfilePhoto1",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Gender = 1,
                            ImgSrc = "ProfilePhoto2",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Rzeszow",
                            Gender = 2,
                            ImgSrc = "ProfilePhoto2",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ModelPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<bool>("Puncture")
                        .HasColumnType("bit");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<bool>("Tattoo")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("ModelsPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 7, 11, 19, 24, 45, 726, DateTimeKind.Local).AddTicks(2015),
                            ImgSrc = "sciezka MODEL 1",
                            ModelId = 1,
                            Puncture = true,
                            Style = 4,
                            Tattoo = false
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 7, 12, 19, 24, 45, 726, DateTimeKind.Local).AddTicks(3322),
                            ImgSrc = "sciezka MODEL 2",
                            ModelId = 2,
                            Puncture = true,
                            Style = 5,
                            Tattoo = true
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 7, 12, 19, 24, 45, 726, DateTimeKind.Local).AddTicks(3415),
                            ImgSrc = "sciezka MODEL 3",
                            ModelId = 3,
                            Puncture = false,
                            Style = 1,
                            Tattoo = false
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Photographer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photographers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Krakow",
                            Experience = 3,
                            Gender = 2,
                            ImgSrc = "ProfilePhoto1",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Experience = 1,
                            Gender = 1,
                            ImgSrc = "ProfilePhoto2",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Rzeszow",
                            Experience = 2,
                            Gender = 2,
                            ImgSrc = "ProfilePhoto2",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.PhotographerPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PhotographerId")
                        .HasColumnType("int");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotographerId");

                    b.ToTable("PhotographersPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 6, 19, 19, 24, 45, 726, DateTimeKind.Local).AddTicks(7363),
                            ImgSrc = "sciezka Photographer 1",
                            PhotographerId = 1,
                            Style = 4
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 6, 30, 19, 24, 45, 726, DateTimeKind.Local).AddTicks(7994),
                            ImgSrc = "sciezka Photographer 2",
                            PhotographerId = 2,
                            Style = 5
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 7, 11, 19, 24, 45, 726, DateTimeKind.Local).AddTicks(8018),
                            ImgSrc = "sciezka Photographer 3",
                            PhotographerId = 3,
                            Style = 1
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Piercer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Punctures")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Studio")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Piercers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Krakow",
                            Experience = 0,
                            Gender = 2,
                            ImgSrc = "ProfilePhoto1",
                            Punctures = 0,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Experience = 0,
                            Gender = 1,
                            ImgSrc = "ProfilePhoto2",
                            Punctures = 0,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Rzeszow",
                            Experience = 0,
                            Gender = 2,
                            ImgSrc = "ProfilePhoto2",
                            Punctures = 0,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Piercing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PiercerId")
                        .HasColumnType("int");

                    b.Property<int>("Puncture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PiercerId");

                    b.ToTable("Piercings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 6, 9, 19, 24, 45, 725, DateTimeKind.Local).AddTicks(6206),
                            ImgSrc = "sciezka PIERCING 1",
                            PiercerId = 1,
                            Puncture = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 6, 10, 19, 24, 45, 725, DateTimeKind.Local).AddTicks(6860),
                            ImgSrc = "sciezka PIERCING 2",
                            PiercerId = 2,
                            Puncture = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 6, 11, 19, 24, 45, 725, DateTimeKind.Local).AddTicks(6889),
                            ImgSrc = "sciezka PIERCING 3",
                            PiercerId = 3,
                            Puncture = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<int>("TattooerId")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TattooerId");

                    b.ToTable("Tattoos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 2,
                            Date = new DateTime(2020, 6, 20, 19, 24, 45, 725, DateTimeKind.Local).AddTicks(1520),
                            ImgSrc = "sciezka TATTOO 1",
                            Style = 1,
                            TattooerId = 1,
                            Technique = 2
                        },
                        new
                        {
                            Id = 2,
                            Color = 2,
                            Date = new DateTime(2020, 6, 21, 19, 24, 45, 725, DateTimeKind.Local).AddTicks(2868),
                            ImgSrc = "sciezka TATTOO 2",
                            Style = 2,
                            TattooerId = 2,
                            Technique = 1
                        },
                        new
                        {
                            Id = 3,
                            Color = 1,
                            Date = new DateTime(2020, 6, 22, 19, 24, 45, 725, DateTimeKind.Local).AddTicks(2907),
                            ImgSrc = "sciezka TATTOO 3",
                            Style = 3,
                            TattooerId = 3,
                            Technique = 2
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Tattooer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Studio")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Styles")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tattooers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Krakow",
                            Experience = 0,
                            Gender = 2,
                            ImgSrc = "ProfilePhoto1",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Styles = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Experience = 0,
                            Gender = 1,
                            ImgSrc = "ProfilePhoto2",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Styles = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Rzeszow",
                            Experience = 0,
                            Gender = 2,
                            ImgSrc = "ProfilePhoto2",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Styles = 0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleSubcategory", "ArticleSubcategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubcategory", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleCategory", "ArticleCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.AvailableDesign", b =>
                {
                    b.HasOne("PortalApi.Entities.Tattooer", "Tattooer")
                        .WithMany()
                        .HasForeignKey("TattooerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.City", b =>
                {
                    b.HasOne("PortalApi.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Model", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.ModelPhoto", b =>
                {
                    b.HasOne("PortalApi.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Photographer", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.PhotographerPhoto", b =>
                {
                    b.HasOne("PortalApi.Entities.Photographer", "Photographer")
                        .WithMany()
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Piercer", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Piercing", b =>
                {
                    b.HasOne("PortalApi.Entities.Piercer", "Piercer")
                        .WithMany()
                        .HasForeignKey("PiercerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.HasOne("PortalApi.Entities.Tattooer", "Tattooer")
                        .WithMany()
                        .HasForeignKey("TattooerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Tattooer", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
