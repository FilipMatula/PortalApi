// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalApi.Contexts;

namespace PortalApi.Migrations
{
    [DbContext(typeof(PortalContext))]
    partial class PortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleSubcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2500)")
                        .HasMaxLength(2500);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleSubcategoryId");

                    b.HasIndex("PersonId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy1_Content",
                            Date = new DateTime(2020, 6, 1, 17, 14, 22, 769, DateTimeKind.Local).AddTicks(251),
                            ImgSrc = "sciezka IMG 1",
                            PersonId = 1,
                            Title = "Rozmowy1-Title"
                        },
                        new
                        {
                            Id = 2,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy2_Content",
                            Date = new DateTime(2020, 6, 2, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2695),
                            ImgSrc = "sciezka IMG 2",
                            PersonId = 1,
                            Title = "Rozmowy2-Title"
                        },
                        new
                        {
                            Id = 3,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy3e_Content",
                            Date = new DateTime(2020, 6, 3, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2763),
                            ImgSrc = "sciezka IMG 3",
                            PersonId = 1,
                            Title = "Rozmowy3e-Title"
                        },
                        new
                        {
                            Id = 4,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy4_Content",
                            Date = new DateTime(2020, 6, 4, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2769),
                            ImgSrc = "sciezka IMG 4",
                            PersonId = 1,
                            Title = "Rozmowy4-Title"
                        },
                        new
                        {
                            Id = 5,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy5_Content",
                            Date = new DateTime(2020, 6, 5, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2774),
                            ImgSrc = "sciezka IMG 5",
                            PersonId = 1,
                            Title = "Rozmowy5-Title"
                        },
                        new
                        {
                            Id = 6,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia1_Content",
                            Date = new DateTime(2020, 5, 31, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2778),
                            ImgSrc = "sciezka IMG 1",
                            PersonId = 2,
                            Title = "Wydarzenia1-Title"
                        },
                        new
                        {
                            Id = 7,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia2_Content",
                            Date = new DateTime(2020, 5, 31, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2782),
                            ImgSrc = "sciezka IMG 2",
                            PersonId = 2,
                            Title = "Wydarzenia2-Title"
                        },
                        new
                        {
                            Id = 8,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia3_Content",
                            Date = new DateTime(2020, 5, 31, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2786),
                            ImgSrc = "sciezka IMG 3",
                            PersonId = 2,
                            Title = "Wydarzenia3-Title"
                        },
                        new
                        {
                            Id = 9,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia4_Content",
                            Date = new DateTime(2020, 5, 31, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2790),
                            ImgSrc = "sciezka IMG 4",
                            PersonId = 2,
                            Title = "Wydarzenia4-Title"
                        },
                        new
                        {
                            Id = 10,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia5_Content",
                            Date = new DateTime(2020, 5, 31, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(2794),
                            ImgSrc = "sciezka IMG 5",
                            PersonId = 2,
                            Title = "Wydarzenia5-Title"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ArticleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tatuaż"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Piercing"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("ArticleSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleCategoryId = 1,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 2,
                            ArticleCategoryId = 1,
                            Name = "Wydarzenia"
                        },
                        new
                        {
                            Id = 3,
                            ArticleCategoryId = 1,
                            Name = "Porady o tatuażu"
                        },
                        new
                        {
                            Id = 4,
                            ArticleCategoryId = 1,
                            Name = "Relacje"
                        },
                        new
                        {
                            Id = 5,
                            ArticleCategoryId = 1,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 6,
                            ArticleCategoryId = 1,
                            Name = "Ze świata"
                        },
                        new
                        {
                            Id = 7,
                            ArticleCategoryId = 1,
                            Name = "Oferty pracy"
                        },
                        new
                        {
                            Id = 8,
                            ArticleCategoryId = 2,
                            Name = "O przekłuciu"
                        },
                        new
                        {
                            Id = 9,
                            ArticleCategoryId = 2,
                            Name = "Porady"
                        },
                        new
                        {
                            Id = 10,
                            ArticleCategoryId = 2,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 11,
                            ArticleCategoryId = 2,
                            Name = "Różne"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("Puncture")
                        .HasColumnType("bit");

                    b.Property<bool>("Tattoo")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Krakow",
                            Date = new DateTime(2020, 7, 3, 17, 14, 22, 773, DateTimeKind.Local).AddTicks(7298),
                            Gender = 2,
                            ImgSrc = "sciezka MODEL 1",
                            PersonId = 1,
                            Puncture = true,
                            Tattoo = false
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Date = new DateTime(2020, 7, 4, 17, 14, 22, 773, DateTimeKind.Local).AddTicks(7903),
                            Gender = 1,
                            ImgSrc = "sciezka MODEL 2",
                            PersonId = 2,
                            Puncture = true,
                            Tattoo = true
                        },
                        new
                        {
                            Id = 3,
                            City = "Poznan",
                            Date = new DateTime(2020, 7, 4, 17, 14, 22, 773, DateTimeKind.Local).AddTicks(7929),
                            Gender = 2,
                            ImgSrc = "sciezka MODEL 3",
                            PersonId = 3,
                            Puncture = false,
                            Tattoo = false
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Photographer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Media")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Photographers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "about me - photographer 1",
                            City = "Krakow",
                            Date = new DateTime(2020, 6, 11, 17, 14, 22, 774, DateTimeKind.Local).AddTicks(2614),
                            Experience = 1,
                            Gender = 2,
                            ImgSrc = "sciezka Photographer 1",
                            Media = "/facebook ; /Twitter ; /Instagram",
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            About = "about me - photographer 2",
                            City = "Warszawa",
                            Date = new DateTime(2020, 6, 22, 17, 14, 22, 774, DateTimeKind.Local).AddTicks(3271),
                            Experience = 3,
                            Gender = 1,
                            ImgSrc = "sciezka Photographer 2",
                            Media = "/facebook ; /Twitter ; /Instagram",
                            PersonId = 2
                        },
                        new
                        {
                            Id = 3,
                            About = "about me - photographer 3",
                            City = "Poznan",
                            Date = new DateTime(2020, 7, 3, 17, 14, 22, 774, DateTimeKind.Local).AddTicks(3298),
                            Experience = 3,
                            Gender = 2,
                            ImgSrc = "sciezka Photographer 3",
                            Media = "/facebook ; /Twitter ; /Instagram",
                            PersonId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Piercing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Puncture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Piercings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Krakow",
                            Date = new DateTime(2020, 6, 1, 17, 14, 22, 773, DateTimeKind.Local).AddTicks(2281),
                            Gender = 2,
                            ImgSrc = "sciezka PIERCING 1",
                            PersonId = 1,
                            Puncture = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Wroclaw",
                            Date = new DateTime(2020, 6, 2, 17, 14, 22, 773, DateTimeKind.Local).AddTicks(2888),
                            Gender = 1,
                            ImgSrc = "sciezka PIERCING 2",
                            PersonId = 1,
                            Puncture = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Poznan",
                            Date = new DateTime(2020, 6, 3, 17, 14, 22, 773, DateTimeKind.Local).AddTicks(2939),
                            Gender = 1,
                            ImgSrc = "sciezka PIERCING 3",
                            PersonId = 2,
                            Puncture = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Tattoos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Rzeszow",
                            Color = 2,
                            Date = new DateTime(2020, 6, 12, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(7396),
                            Gender = 2,
                            ImgSrc = "sciezka TATTOO 1",
                            PersonId = 1,
                            Style = 1,
                            Technique = 2
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Color = 2,
                            Date = new DateTime(2020, 6, 13, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(8549),
                            Gender = 1,
                            ImgSrc = "sciezka TATTOO 2",
                            PersonId = 1,
                            Style = 2,
                            Technique = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Krakow",
                            Color = 1,
                            Date = new DateTime(2020, 6, 14, 17, 14, 22, 772, DateTimeKind.Local).AddTicks(8582),
                            Gender = 2,
                            ImgSrc = "sciezka TATTOO 3",
                            PersonId = 2,
                            Style = 3,
                            Technique = 2
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleSubcategory", "ArticleSubcategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubcategory", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleCategory", "ArticleCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Model", b =>
                {
                    b.HasOne("PortalApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Photographer", b =>
                {
                    b.HasOne("PortalApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Piercing", b =>
                {
                    b.HasOne("PortalApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.HasOne("PortalApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
