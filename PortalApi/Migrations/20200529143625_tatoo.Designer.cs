// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalApi.Contexts;

namespace PortalApi.Migrations
{
    [DbContext(typeof(PortalContext))]
    [Migration("20200529143625_tatoo")]
    partial class tatoo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleSubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2500)")
                        .HasMaxLength(2500);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleSubCategoryId");

                    b.HasIndex("PersonId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleSubCategoryId = 1,
                            Content = "Rozmowy1_Content",
                            Date = new DateTime(2020, 5, 30, 16, 36, 25, 452, DateTimeKind.Local).AddTicks(8216),
                            ImgSrc = "sciezka IMG 1",
                            PersonId = 1,
                            Title = "Rozmowy1-Title"
                        },
                        new
                        {
                            Id = 2,
                            ArticleSubCategoryId = 1,
                            Content = "Rozmowy2_Content",
                            Date = new DateTime(2020, 5, 31, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5309),
                            ImgSrc = "sciezka IMG 2",
                            PersonId = 1,
                            Title = "Rozmowy2-Title"
                        },
                        new
                        {
                            Id = 3,
                            ArticleSubCategoryId = 1,
                            Content = "Rozmowy3e_Content",
                            Date = new DateTime(2020, 6, 1, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5424),
                            ImgSrc = "sciezka IMG 3",
                            PersonId = 1,
                            Title = "Rozmowy3e-Title"
                        },
                        new
                        {
                            Id = 4,
                            ArticleSubCategoryId = 1,
                            Content = "Rozmowy4_Content",
                            Date = new DateTime(2020, 6, 2, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5435),
                            ImgSrc = "sciezka IMG 4",
                            PersonId = 1,
                            Title = "Rozmowy4-Title"
                        },
                        new
                        {
                            Id = 5,
                            ArticleSubCategoryId = 1,
                            Content = "Rozmowy5_Content",
                            Date = new DateTime(2020, 6, 3, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5440),
                            ImgSrc = "sciezka IMG 5",
                            PersonId = 1,
                            Title = "Rozmowy5-Title"
                        },
                        new
                        {
                            Id = 6,
                            ArticleSubCategoryId = 2,
                            Content = "Wydarzenia1_Content",
                            Date = new DateTime(2020, 5, 29, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5444),
                            ImgSrc = "sciezka IMG 1",
                            PersonId = 2,
                            Title = "Wydarzenia1-Title"
                        },
                        new
                        {
                            Id = 7,
                            ArticleSubCategoryId = 2,
                            Content = "Wydarzenia2_Content",
                            Date = new DateTime(2020, 5, 29, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5450),
                            ImgSrc = "sciezka IMG 2",
                            PersonId = 2,
                            Title = "Wydarzenia2-Title"
                        },
                        new
                        {
                            Id = 8,
                            ArticleSubCategoryId = 2,
                            Content = "Wydarzenia3_Content",
                            Date = new DateTime(2020, 5, 29, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5455),
                            ImgSrc = "sciezka IMG 3",
                            PersonId = 2,
                            Title = "Wydarzenia3-Title"
                        },
                        new
                        {
                            Id = 9,
                            ArticleSubCategoryId = 2,
                            Content = "Wydarzenia4_Content",
                            Date = new DateTime(2020, 5, 29, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5458),
                            ImgSrc = "sciezka IMG 4",
                            PersonId = 2,
                            Title = "Wydarzenia4-Title"
                        },
                        new
                        {
                            Id = 10,
                            ArticleSubCategoryId = 2,
                            Content = "Wydarzenia5_Content",
                            Date = new DateTime(2020, 5, 29, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(5462),
                            ImgSrc = "sciezka IMG 5",
                            PersonId = 2,
                            Title = "Wydarzenia5-Title"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ArticleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tatuaż"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Piercing"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("ArticleSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleCategoryId = 1,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 2,
                            ArticleCategoryId = 1,
                            Name = "Wydarzenia"
                        },
                        new
                        {
                            Id = 3,
                            ArticleCategoryId = 1,
                            Name = "Porady o tatuażu"
                        },
                        new
                        {
                            Id = 4,
                            ArticleCategoryId = 1,
                            Name = "Relacje"
                        },
                        new
                        {
                            Id = 5,
                            ArticleCategoryId = 1,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 6,
                            ArticleCategoryId = 1,
                            Name = "Ze świata"
                        },
                        new
                        {
                            Id = 7,
                            ArticleCategoryId = 1,
                            Name = "Oferty pracy"
                        },
                        new
                        {
                            Id = 8,
                            ArticleCategoryId = 2,
                            Name = "O przekłuciu"
                        },
                        new
                        {
                            Id = 9,
                            ArticleCategoryId = 2,
                            Name = "Porady"
                        },
                        new
                        {
                            Id = 10,
                            ArticleCategoryId = 2,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 11,
                            ArticleCategoryId = 2,
                            Name = "Różne"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Technique")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Tattoos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Rzeszow",
                            Color = "Czarny",
                            Date = new DateTime(2020, 6, 10, 16, 36, 25, 455, DateTimeKind.Local).AddTicks(9711),
                            Gender = "Kobieta",
                            ImgSrc = "sciezka TATTOO 1",
                            PersonId = 1,
                            Style = "Styl1",
                            Technique = "Handpoke"
                        },
                        new
                        {
                            Id = 2,
                            City = "Warszawa",
                            Color = "Bialy",
                            Date = new DateTime(2020, 6, 11, 16, 36, 25, 456, DateTimeKind.Local).AddTicks(940),
                            Gender = "Mezczyzna",
                            ImgSrc = "sciezka TATTOO 2",
                            PersonId = 1,
                            Style = "Styl2",
                            Technique = "Handpoke"
                        },
                        new
                        {
                            Id = 3,
                            City = "Krakow",
                            Color = "Niebieski",
                            Date = new DateTime(2020, 6, 12, 16, 36, 25, 456, DateTimeKind.Local).AddTicks(975),
                            Gender = "Kobieta",
                            ImgSrc = "sciezka TATTOO 3",
                            PersonId = 2,
                            Style = "Styl3",
                            Technique = "Maszynka"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleSubCategory", "ArticleSubCategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubCategory", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleCategory", "ArticleCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.HasOne("PortalApi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
