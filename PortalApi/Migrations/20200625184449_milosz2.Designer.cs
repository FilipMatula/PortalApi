// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortalApi.Contexts;

namespace PortalApi.Migrations
{
    [DbContext(typeof(PortalContext))]
    [Migration("20200625184449_milosz2")]
    partial class milosz2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleSubcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2500)")
                        .HasMaxLength(2500);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleSubcategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy1_Content",
                            Date = new DateTime(2020, 6, 26, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(2612),
                            ImgSrc = "sciezka IMG 1",
                            Title = "Rozmowy1-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy2_Content",
                            Date = new DateTime(2020, 6, 27, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3222),
                            ImgSrc = "sciezka IMG 2",
                            Title = "Rozmowy2-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy3e_Content",
                            Date = new DateTime(2020, 6, 28, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3234),
                            ImgSrc = "sciezka IMG 3",
                            Title = "Rozmowy3e-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy4_Content",
                            Date = new DateTime(2020, 6, 29, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3238),
                            ImgSrc = "sciezka IMG 4",
                            Title = "Rozmowy4-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            ArticleSubcategoryId = 1,
                            Content = "Rozmowy5_Content",
                            Date = new DateTime(2020, 6, 30, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3242),
                            ImgSrc = "sciezka IMG 5",
                            Title = "Rozmowy5-Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia1_Content",
                            Date = new DateTime(2020, 6, 25, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3246),
                            ImgSrc = "sciezka IMG 1",
                            Title = "Wydarzenia1-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia2_Content",
                            Date = new DateTime(2020, 6, 25, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3249),
                            ImgSrc = "sciezka IMG 2",
                            Title = "Wydarzenia2-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia3_Content",
                            Date = new DateTime(2020, 6, 25, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3253),
                            ImgSrc = "sciezka IMG 3",
                            Title = "Wydarzenia3-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia4_Content",
                            Date = new DateTime(2020, 6, 25, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3257),
                            ImgSrc = "sciezka IMG 4",
                            Title = "Wydarzenia4-Title",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            ArticleSubcategoryId = 2,
                            Content = "Wydarzenia5_Content",
                            Date = new DateTime(2020, 6, 25, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(3260),
                            ImgSrc = "sciezka IMG 5",
                            Title = "Wydarzenia5-Title",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ArticleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleType = 1,
                            Name = "Tatuaż"
                        },
                        new
                        {
                            Id = 2,
                            ArticleType = 2,
                            Name = "Piercing"
                        },
                        new
                        {
                            Id = 3,
                            ArticleType = 3,
                            Name = "Modeling"
                        },
                        new
                        {
                            Id = 4,
                            ArticleType = 4,
                            Name = "Fotografia"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("ArticleSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleCategoryId = 1,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 2,
                            ArticleCategoryId = 1,
                            Name = "Wydarzenia"
                        },
                        new
                        {
                            Id = 3,
                            ArticleCategoryId = 1,
                            Name = "Porady o tatuażu"
                        },
                        new
                        {
                            Id = 4,
                            ArticleCategoryId = 1,
                            Name = "Relacje"
                        },
                        new
                        {
                            Id = 5,
                            ArticleCategoryId = 1,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 6,
                            ArticleCategoryId = 1,
                            Name = "Ze świata"
                        },
                        new
                        {
                            Id = 7,
                            ArticleCategoryId = 1,
                            Name = "Oferty pracy"
                        },
                        new
                        {
                            Id = 8,
                            ArticleCategoryId = 2,
                            Name = "O przekłuciu"
                        },
                        new
                        {
                            Id = 9,
                            ArticleCategoryId = 2,
                            Name = "Porady"
                        },
                        new
                        {
                            Id = 10,
                            ArticleCategoryId = 2,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 11,
                            ArticleCategoryId = 2,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 12,
                            ArticleCategoryId = 3,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 13,
                            ArticleCategoryId = 3,
                            Name = "Różne"
                        },
                        new
                        {
                            Id = 14,
                            ArticleCategoryId = 4,
                            Name = "Rozmowy"
                        },
                        new
                        {
                            Id = 15,
                            ArticleCategoryId = 4,
                            Name = "Różne"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.AvailableDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<int>("TattooStyle")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AvailableDesigns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 1,
                            Date = new DateTime(2020, 6, 26, 20, 44, 48, 565, DateTimeKind.Local).AddTicks(7094),
                            ImgSrc = "sciezka Available Design 1",
                            Reserved = false,
                            TattooStyle = 1,
                            Technique = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = 1,
                            Date = new DateTime(2020, 6, 27, 20, 44, 48, 565, DateTimeKind.Local).AddTicks(7734),
                            ImgSrc = "sciezka Available Design 2",
                            Price = 300.0,
                            Reserved = true,
                            TattooStyle = 2,
                            Technique = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = 1,
                            Date = new DateTime(2020, 6, 28, 20, 44, 48, 565, DateTimeKind.Local).AddTicks(7747),
                            ImgSrc = "sciezka Available Design 3",
                            Price = 199.99000000000001,
                            Reserved = false,
                            TattooStyle = 3,
                            Technique = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Warszawa"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Krakow"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Wroclaw"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "Monachium"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            Name = "Frankfurt"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            Name = "Paryż"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Polska"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Niemcy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Francja"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("Breast")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Hip")
                        .HasColumnType("int");

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Waist")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "cos tam robie cos tam nie robie - sekacja o mnie",
                            Breast = 60,
                            Experience = 3,
                            Height = 160,
                            Hip = 70,
                            MediaFB = "",
                            MediaInstagram = "LINK INST 1",
                            MediaTwitter = "LINK TWITTER",
                            UserId = 1,
                            Waist = 45,
                            Weight = 53
                        },
                        new
                        {
                            Id = 2,
                            About = "about about about about abour tasd",
                            Breast = 80,
                            Experience = 1,
                            Height = 180,
                            Hip = 90,
                            MediaFB = "",
                            MediaInstagram = "LINK INST 2",
                            MediaTwitter = "LINK TWITTER 2",
                            UserId = 2,
                            Waist = 65,
                            Weight = 73
                        },
                        new
                        {
                            Id = 3,
                            About = "kolejnny kolejny kolejny model model model about 3",
                            Breast = 70,
                            Experience = 2,
                            Height = 170,
                            Hip = 60,
                            MediaFB = "",
                            MediaInstagram = "LINK INST 3",
                            MediaTwitter = "LINK TWITTER 3",
                            UserId = 3,
                            Waist = 55,
                            Weight = 63
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ModelPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("ModelingStyle")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ModelsPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 7, 28, 20, 44, 48, 561, DateTimeKind.Local).AddTicks(5468),
                            ImgSrc = "sciezka MODEL 1",
                            ModelingStyle = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 7, 29, 20, 44, 48, 561, DateTimeKind.Local).AddTicks(5804),
                            ImgSrc = "sciezka MODEL 2",
                            ModelingStyle = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 7, 29, 20, 44, 48, 561, DateTimeKind.Local).AddTicks(5814),
                            ImgSrc = "sciezka MODEL 3",
                            ModelingStyle = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Photographer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Photographers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Phothographer 1 about ",
                            Experience = 3,
                            MediaFB = "FACEBOOK 1 Photographer",
                            MediaInstagram = "INSTAGRAM 1 PHOTOGRAPHER",
                            MediaTwitter = "TWITTER 1 PHOTOGRAPHER",
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            About = "Phothographer 2 about ",
                            Experience = 1,
                            MediaFB = "FACEBOOK 2 Photographer",
                            MediaInstagram = "INSTAGRAM 2 PHOTOGRAPHER",
                            MediaTwitter = "TWITTER 2 PHOTOGRAPHER",
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            About = "Phothographer 3 about ",
                            Experience = 2,
                            MediaFB = "FACEBOOK 3 Photographer",
                            MediaInstagram = "INSTAGRAM 3 PHOTOGRAPHER",
                            MediaTwitter = "TWITTER 3 PHOTOGRAPHER",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.PhotographerPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("ModelingStyle")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhotographersPhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 7, 6, 20, 44, 48, 565, DateTimeKind.Local).AddTicks(4289),
                            ImgSrc = "sciezka Photographer 1",
                            ModelingStyle = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 7, 17, 20, 44, 48, 565, DateTimeKind.Local).AddTicks(4622),
                            ImgSrc = "sciezka Photographer 2",
                            ModelingStyle = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 7, 28, 20, 44, 48, 565, DateTimeKind.Local).AddTicks(4633),
                            ImgSrc = "sciezka Photographer 3",
                            ModelingStyle = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Piercer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Punctures")
                        .HasColumnType("int");

                    b.Property<string>("Studio")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Piercers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "nastolenia piercerka sluzy przekuciami",
                            Experience = 1,
                            MediaFB = "FACEBOOK link 1",
                            MediaInstagram = "INSTAGRAM link 1",
                            MediaTwitter = "TWITTER link 1",
                            Punctures = 2,
                            Studio = "PierKRA",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            About = "bardzo duzo pracy - wciaz znajduje czas na pierscienie :)",
                            Experience = 2,
                            MediaFB = "FACEBOOK link 2",
                            MediaInstagram = "INSTAGRAM link 2",
                            MediaTwitter = "TWITTER link 2",
                            Punctures = 1,
                            Studio = "PiercerRZ",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            About = "bardzo duzo pracy :)",
                            Experience = 3,
                            MediaFB = "FACEBOOK link e",
                            MediaInstagram = "INSTAGRAM link 3",
                            MediaTwitter = "TWITTER link 3",
                            Punctures = 3,
                            Studio = "PiercerRZ3",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Piercing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Puncture")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Piercings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 6, 26, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(7205),
                            ImgSrc = "sciezka PIERCING 1",
                            Puncture = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 6, 27, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(7525),
                            ImgSrc = "sciezka PIERCING 2",
                            Puncture = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 6, 28, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(7535),
                            ImgSrc = "sciezka PIERCING 3",
                            Puncture = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("TattooStyle")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tattoos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 2,
                            Date = new DateTime(2020, 7, 7, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(5048),
                            ImgSrc = "sciezka TATTOO 1",
                            TattooStyle = 1,
                            Technique = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = 2,
                            Date = new DateTime(2020, 7, 8, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(5633),
                            ImgSrc = "sciezka TATTOO 2",
                            TattooStyle = 2,
                            Technique = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = 1,
                            Date = new DateTime(2020, 7, 9, 20, 44, 48, 560, DateTimeKind.Local).AddTicks(5645),
                            ImgSrc = "sciezka TATTOO 3",
                            TattooStyle = 3,
                            Technique = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Tattooer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("MediaFB")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaInstagram")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MediaTwitter")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Studio")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TattooStyle")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tattooers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Marko - sekacja o mnie",
                            Experience = 1,
                            MediaFB = "FACEBOOOK LINK 4",
                            MediaInstagram = "LINK INST 4",
                            MediaTwitter = "LINK TWITTER 4",
                            Studio = "STUDIO Poznan GO",
                            TattooStyle = 1,
                            Technique = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            About = "SławKO- sekacja o mnie",
                            Experience = 3,
                            MediaFB = "FACEBOOOK LINK 5",
                            MediaInstagram = "LINK INST 5",
                            MediaTwitter = "LINK TWITTER 5",
                            Studio = "STUDIO = GLIWICE MAIN = STUDIO",
                            TattooStyle = 3,
                            Technique = 1,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 18,
                            City = "Krakow",
                            Email = "email1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marika",
                            Gender = 2,
                            ImgSrc = "ProfilePhoto1",
                            LastName = "Nowak-Piercer",
                            RegistrationDate = new DateTime(2020, 6, 25, 21, 44, 48, 555, DateTimeKind.Local).AddTicks(9389),
                            Username = "Marina"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "Rzeszow",
                            Email = "email2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            Gender = 1,
                            ImgSrc = "ProfilePhoto12",
                            LastName = "Kowalski-Piercer",
                            RegistrationDate = new DateTime(2020, 6, 25, 22, 44, 48, 558, DateTimeKind.Local).AddTicks(8768),
                            Username = "JanKo"
                        },
                        new
                        {
                            Id = 3,
                            Age = 31,
                            City = "Wroclaw",
                            Email = "email3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mirko",
                            Gender = 1,
                            ImgSrc = "ProfilePhoto3",
                            LastName = "MirkoLastNamePiercer",
                            RegistrationDate = new DateTime(2020, 6, 25, 23, 44, 48, 558, DateTimeKind.Local).AddTicks(8799),
                            Username = "MirKO"
                        },
                        new
                        {
                            Id = 4,
                            Age = 14,
                            City = "Poznan",
                            Email = "email4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marko",
                            Gender = 1,
                            ImgSrc = "ProfilePhoto4",
                            LastName = "Marko Marko Marko",
                            RegistrationDate = new DateTime(2020, 6, 26, 1, 44, 48, 558, DateTimeKind.Local).AddTicks(8806),
                            Username = "MarKO"
                        },
                        new
                        {
                            Id = 5,
                            Age = 17,
                            City = "Gliwice",
                            Email = "email5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "SławoKO",
                            Gender = 1,
                            ImgSrc = "ProfilePhoto5",
                            LastName = "sławko Sławko sławko",
                            RegistrationDate = new DateTime(2020, 6, 26, 0, 44, 48, 558, DateTimeKind.Local).AddTicks(8811),
                            Username = "SławKOR"
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Article", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleSubcategory", "ArticleSubcategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.ArticleSubcategory", b =>
                {
                    b.HasOne("PortalApi.Entities.ArticleCategory", "ArticleCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.AvailableDesign", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany("AvailableDesigns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.City", b =>
                {
                    b.HasOne("PortalApi.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Model", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithOne("Model")
                        .HasForeignKey("PortalApi.Entities.Model", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PortalApi.ProfilesProperties.BodyDecorations", "BodyDecorations", b1 =>
                        {
                            b1.Property<int>("ModelId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Puncture")
                                .HasColumnType("bit");

                            b1.Property<bool>("Tattoo")
                                .HasColumnType("bit");

                            b1.HasKey("ModelId");

                            b1.ToTable("Models");

                            b1.WithOwner()
                                .HasForeignKey("ModelId");
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.ModelPhoto", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany("ModelPhotos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PortalApi.ProfilesProperties.BodyDecorations", "BodyDecorations", b1 =>
                        {
                            b1.Property<int>("ModelPhotoId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Puncture")
                                .HasColumnType("bit");

                            b1.Property<bool>("Tattoo")
                                .HasColumnType("bit");

                            b1.HasKey("ModelPhotoId");

                            b1.ToTable("ModelsPhotos");

                            b1.WithOwner()
                                .HasForeignKey("ModelPhotoId");

                            b1.HasData(
                                new
                                {
                                    ModelPhotoId = 1,
                                    Puncture = false,
                                    Tattoo = false
                                },
                                new
                                {
                                    ModelPhotoId = 2,
                                    Puncture = false,
                                    Tattoo = true
                                },
                                new
                                {
                                    ModelPhotoId = 3,
                                    Puncture = true,
                                    Tattoo = false
                                });
                        });
                });

            modelBuilder.Entity("PortalApi.Entities.Photographer", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithOne("Photographer")
                        .HasForeignKey("PortalApi.Entities.Photographer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.PhotographerPhoto", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany("PhotographerPhotos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Piercer", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithOne("Piercer")
                        .HasForeignKey("PortalApi.Entities.Piercer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Piercing", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany("Piercings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Tattoo", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithMany("Tattoos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalApi.Entities.Tattooer", b =>
                {
                    b.HasOne("PortalApi.Entities.User", "User")
                        .WithOne("Tattooer")
                        .HasForeignKey("PortalApi.Entities.Tattooer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
